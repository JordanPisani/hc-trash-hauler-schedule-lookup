import{q as m,dC as u,cv as c,u as p,r as _}from"./index.b4c7b16d.js";import{u as y}from"./aaBoundingRect.39e6473b.js";import{Z as f,a as w,n as I}from"./QueryEngine.a1faf756.js";import{u as b}from"./Pipeline.67c28725.js";import"./normalizeUtils.87810117.js";import"./WhereClause.b95d88ca.js";import"./projection.84ac2725.js";import"./featureConversionUtils.1a47e5d5.js";import"./ClassBreaksDefinition.f2db4f87.js";import"./TileInfo.65d77b19.js";import"./quickselect.b4c2f48f.js";import"./ogcFeatureUtils.2ba3b21a.js";import"./pbf.a812e4c5.js";import"./enums2.51e7cb08.js";import"./enums.0a9daf41.js";import"./Texture.314d0b7e.js";import"./context-util.5426b7d1.js";import"./TileKey.91b6374f.js";import"./ItemCache.ee6e92d9.js";import"./json.67c3770f.js";import"./QueryEngineCapabilities.9e441dc1.js";import"./utils.65407675.js";import"./OptimizedGeometry.c09f520b.js";import"./query.83f10b6d.js";import"./pbfQueryUtils.2d77d189.js";import"./OptimizedFeatureSet.2574e09f.js";import"./geojson.f01f634a.js";import"./clientSideDefaults.c6ba7436.js";const d=m.getLogger("esri.views.2d.layers.features.support.whereUtils"),g={getAttribute:(r,t)=>r.field(t)};async function T(r,t){const e=await import("./WhereClause.b95d88ca.js");try{const i=e.WhereClause.create(r,t);if(!i.isStandardized){const s=new p("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",i);d.error(s)}return s=>{const n=s.readArcadeFeature();return i.testFeature(n,g)}}catch{return d.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",r),s=>!0}}const v=m.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter"),a=1,x=2;class Y{constructor(t){this._geometryBounds=y(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach((t,e)=>{this._idToVisibility.set(e,0)})}setKnownIds(t){for(const e of t)this._idToVisibility.set(e,a)}setTrue(t){const e=[],i=[],s=new Set(t);return this._idToVisibility.forEach((n,o)=>{const l=!!(this._idToVisibility.get(o)&a),h=s.has(o);!l&&h?e.push(o):l&&!h&&i.push(o),this._idToVisibility.set(o,h?a|x:0)}),{show:e,hide:i}}createQuery(){const{geometry:t,spatialRel:e,where:i,timeExtent:s,objectIds:n}=this;return u.fromJSON({geometry:t,spatialRel:e,where:i,timeExtent:s,objectIds:n})}async update(t,e){this._hash=JSON.stringify(t);const i=await f(t,null,e);await Promise.all([this._setGeometryFilter(i),this._setIdFilter(i),this._setAttributeFilter(i),this._setTimeFilter(i)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await T(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const e=t.geometry,i=t.spatialRel||"esriSpatialRelIntersects",s=await w(i,e,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);c(this._geometryBounds,e),this._spatialQueryOperator=s,this.geometry=e,this.spatialRel=i}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=I(this._serviceInfo.timeInfo,t.timeExtent,b);else{const e=new p("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);v.error(e)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const e=t.readHydratedGeometry();return!!e&&this._spatialQueryOperator(e)}_filterByTime(t){return!_(this._timeOperator)||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach((e,i)=>{e&a||(this._idToVisibility.set(i,a),t.push(i))}),t}}export{Y as default};
