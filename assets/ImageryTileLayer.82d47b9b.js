import{q as Ze,f1 as at,T as ot,r as M,fN as Qe,u as E,t as A,M as L,_ as et,j as N,e as te,X as lt,C as x,E as v,aL as tt,G as Q,eC as ut,eE as ct,aF as ht,aG as ft,eH as dt,eD as mt,eF as pt,aH as yt,aM as gt,fu as xe,h as U,aJ as xt,y as pe,eQ as It,a_ as wt,av as vt,ff as bt,eT as St,ap as Tt,az as Rt,ar as it,ae as rt,aZ as _t,V as Ct}from"./index.b4c7b16d.js";import{p as ze,l as st,u as kt,o as Pt,a as Mt,e as Ae,V as Ot,L as Ft,j as Bt,b as $t}from"./rasterRendererHelper.7e661701.js";import{S as le}from"./TileInfo.65d77b19.js";import{f as Dt,y as Ce,S as Et,p as ye,O as zt,b as At,m as Ht,d as Lt,h as Nt,T as Jt,l as ue,v as Wt,s as jt,k as Fe,a as qt,n as Gt,u as Ut,r as Vt,P as Yt,o as Xt,q as Ie,N as Kt,x as Zt,w as Qt,z as He}from"./dataUtils.ece8c336.js";import"./projection.84ac2725.js";import{G as Le,L as we,T as Ne,Z as Je,V as ei,X as ke,B as Pe,D as ti,K as ii,N as ri,e as si,f as ni,m as Be,c as ai}from"./utils2.ea643dec.js";import{n as oi,z as li}from"./TilemapCache.e98b6397.js";import"./normalizeUtils.87810117.js";import"./ClassBreaksDefinition.f2db4f87.js";import"./byteSizeEstimations.651aa0cf.js";import"./ItemCache.ee6e92d9.js";import"./aaBoundingRect.39e6473b.js";import"./colorUtils.0050d1da.js";var ui=Object.defineProperty,ci=Object.defineProperties,hi=Object.getOwnPropertyDescriptors,We=Object.getOwnPropertySymbols,fi=Object.prototype.hasOwnProperty,di=Object.prototype.propertyIsEnumerable,je=(t,e,i)=>e in t?ui(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,$=(t,e)=>{for(var i in e||(e={}))fi.call(e,i)&&je(t,i,e[i]);if(We)for(var i of We(e))di.call(e,i)&&je(t,i,e[i]);return t},G=(t,e)=>ci(t,hi(e));const qe=Ze.getLogger("esri.layers.mixins.ImageryTileMixin"),mi=t=>{let e=class extends t{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(i){this._set("url",Qe(i,qe))}set renderer(i){this._set("renderer",i),this.updateRenderer()}async convertVectorFieldData(i,r){if(A(i))return null;const n=this._rasterJobHandler.instance,s=this.rasterInfo.dataType;return n?n.convertVectorFieldData({pixelBlock:i,dataType:s},r):Lt(i,s)}async createStreamlinesMesh(i,r){const n=this._rasterJobHandler.instance;return n?n.createStreamlinesMesh(i,r):Nt(i.rendererSettings,i.flowData,M(r.signal)?r.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){const{multidimensionalInfo:r}=this.rasterInfo;if(A(r))return i;let n=i.multidimensionalDefinition||this.multidimensionalDefinition;!A(n)&&n.length||(n=this._getDefaultSlice());const s=i.timeExtent||this.timeExtent;if(M(n)&&M(s)&&(M(s.start)||M(s.end))){var a,u;n=n.map(d=>d.clone());const o=(a=r.variables.find(({name:d})=>d===n[0].variableName))==null||(u=a.dimensions)==null?void 0:u.find(({name:d})=>d==="StdTime"),l=n.find(({dimensionName:d})=>d==="StdTime");if(!o||!l)return G($({},i),{multidimensionalDefinition:null});const{start:c,end:h}=s,m=A(c)?null:c.getTime(),f=A(h)?null:h.getTime(),p=m!=null?m:f,y=f!=null?f:m;if(M(o.values)){const d=o.values.filter(g=>{if(Array.isArray(g)){if(p===y)return g[0]<=p&&g[1]>=p;const I=g[0]<=p&&g[1]>p||g[0]<y&&g[1]>=y,w=g[0]>=p&&g[1]<=y||g[0]<p&&g[1]>y;return I||w}return p===y?g===p:g>=p&&g<=y});if(d.length){const g=d.sort((I,w)=>{var C,b,R,T;return p===y?((R=I[0])!=null?R:I)-((T=w[0])!=null?T:w):Math.abs(((C=I[1])!=null?C:I)-y)-Math.abs(((b=w[1])!=null?b:w)-y)})[0];l.values=[g]}else n=null}else if(o.hasRegularIntervals&&o.extent){const[d,g]=o.extent;p>g||y<d?n=null:l.values=p===y?[p]:[Math.max(d,p),Math.min(g,y)]}}return G($({},i),{multidimensionalDefinition:n})}async updateRenderer(){if(!this.loaded||JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const i=this._rasterJobHandler.instance;i&&(this.symbolizer.rendererJSON=Ae(this.renderer.toJSON()),this.symbolizer.bind(),await i.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(i,r){const n=i&&i.pixelBlock;if(!(M(n)&&n.pixels&&n.pixels.length>0))return null;let s;await this.updateRenderer();const a=this._rasterJobHandler.instance,{bandIds:u}=this;return s=a?await a.symbolize(G($({},i),{simpleStretchParams:r,bandIds:u})):this.symbolizer.symbolize(G($({},i),{simpleStretchParams:r,bandIds:u})),s}getTileUrl(i,r,n){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${r}/${n}`:""}getCompatibleTileInfo(i,r,n=!1){if(!this.loaded||A(r))return null;if(n&&i.equals(this.spatialReference))return this.tileInfo;const s=Rt(i);return le.create({size:256,spatialReference:i,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:r.xmin,y:r.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,r,n,s={}){if(s.requestAsImageElement){const a=this.getTileUrl(i,r,n);return et(a,{responseType:"image",query:$($({},this.refreshParameters),this.raster.ioConfig.customFetchParameters),signal:s.signal}).then(u=>u.data)}if(M(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),A(s.multidimensionalDefinition))){const a=s.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,r,n,a),pixelBlock:null}}return await this._initJobHandler(),this.renderer.type==="raster-shaded-relief"&&(s=G($({},s),{buffer:{cols:1,rows:1}})),this.raster.fetchTile(i,r,n,s)}async fetchPixels(i,r,n,s={}){return M(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),A(s.multidimensionalDefinition))?{extent:i,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(i,r,n,s))}async identify(i,r={}){return M(this.rasterInfo.multidimensionalInfo)&&(r=this.normalizeRasterFetchOptions(r),A(r.multidimensionalDefinition))?{location:i,value:null}:this.raster.identify(i,r)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var i;const r=this.rasterInfo.multidimensionalInfo;if(!M(r)||this.rasterInfo.dataType!=="standard-time")return!1;const n=(i=this.multidimensionalDefinition[0])==null?void 0:i.variableName;return r.variables.some(s=>s.name===n&&s.dimensions.some(a=>a.name==="StdTime"))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new $t;return this._rasterJobHandler.connectionPromise=i.initialize().then(()=>{this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.renderer&&this.updateRenderer()}).catch(()=>null),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(this.interpolation==null){var i;const r=Ot(this.rasterInfo,this.raster.tileType,(i=this.sourceJSON)==null?void 0:i.defaultResamplingMethod);this._set("interpolation",r)}}_getDefaultSlice(){const{multidimensionalInfo:i}=this.raster.rasterInfo;if(!M(i))return null;const r=i.variables[0];return r.dimensions.map(n=>{var s,a;return new ze({variableName:r.name,dimensionName:n.name,values:[(s=(a=n.values)==null?void 0:a[0])!=null?s:n.extent[0]],isSlice:!0})})}_configDefaultRenderer(){const i=this.raster.rasterInfo;var r;this.bandIds||(this.bandIds=Ft(i)),this.renderer||(this.renderer=Bt(i,{bandIds:this.bandIds,variableName:M(this.multidimensionalDefinition)?(r=this.multidimensionalDefinition[0])==null?void 0:r.variableName:null})),this.symbolizer?(this.symbolizer.rendererJSON=Ae(this.renderer.toJSON()),this.symbolizer.rasterInfo=i):this.symbolizer=new Jt({rendererJSON:this.renderer.toJSON(),rasterInfo:i});const n=this.symbolizer.bind();n.success||qe.warn("imagery-tile-mixin",n.error||"The given renderer is not supported by the layer.")}};return x([v()],e.prototype,"_cachedRendererJson",void 0),x([v()],e.prototype,"_compatibleFullExtent",void 0),x([v()],e.prototype,"_rasterJobHandler",void 0),x([v()],e.prototype,"bandIds",void 0),x([v({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),x([v({type:L,json:{read:!1}}),xe("rasterInfo.extent")],e.prototype,"fullExtent",void 0),x([v()],e.prototype,"interpolation",void 0),x([v()],e.prototype,"ioConfig",void 0),x([v({type:[ze]})],e.prototype,"multidimensionalDefinition",void 0),x([v()],e.prototype,"raster",void 0),x([v({readOnly:!0}),xe("raster.rasterInfo")],e.prototype,"rasterInfo",void 0),x([v()],e.prototype,"sourceJSON",void 0),x([v({type:U,json:{read:!1}}),xe("rasterInfo.spatialReference")],e.prototype,"spatialReference",void 0),x([v({type:le,json:{read:!1}}),xe("rasterInfo.storageInfo.tileInfo")],e.prototype,"tileInfo",void 0),x([v(tt)],e.prototype,"url",null),x([v({types:st})],e.prototype,"renderer",null),x([v()],e.prototype,"symbolizer",void 0),e=x([Q("esri.layers.ImageryTileMixin")],e),e};class pi{constructor(e=15e3,i=5e3){this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,i)}decreaseRefCount(e,i){const r=e+"/"+i,n=this._cachedBlocks;if(n.has(r)){const s=n.get(r);return s.refCount--,s.refCount<=0&&(n.delete(r),s.controller&&s.controller.abort()),s.refCount}return 0}getBlock(e,i){const r=e+"/"+i,n=this._cachedBlocks;if(n.has(r)){const s=n.get(r);return s.ts=Date.now(),s.refCount++,n.delete(r),n.set(r,s),s.block}return null}putBlock(e,i,r,n=null){const s=this._cachedBlocks,a=e+"/"+i;if(s.has(a)){const u=s.get(a);u.ts=Date.now(),u.refCount++}else s.set(a,{block:r,ts:Date.now(),refCount:1,controller:n});this._trim(),this._updateTimer()}deleteBlock(e,i){const r=this._cachedBlocks,n=e+"/"+i;r.has(n)&&r.delete(n)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(this._timer!=null)return;const e=this._cachedBlocks;this._timer=setInterval(()=>{const i=Array.from(e),r=Date.now();for(let n=0;n<i.length&&i[n][1].ts<=r-this._duration;n++)e.delete(i[n][0]);e.size===0&&this._clearTimer()},this._interval)}_trim(){const e=this._cachedBlocks;if(this._size===-1||this._size>=e.size)return;const i=Array.from(e);for(let r=0;r<i.length-this._size;r++)e.delete(i[r][0])}_clearTimer(){this._timer!=null&&(clearInterval(this._timer),this._timer=null)}}const ie=new Map,re=new pi;function Ge(t,e){return e==null?t:`${t}?sliceId=${e}`}function yi(t,e,i){if(!ie.has(t))return e==null?re.decreaseRefCount(t,i):0;const r=ie.get(t);if(r[e]==null)return re.decreaseRefCount(t,i);const n=r[e].cache;if(n.has(i)){const s=n.get(i);if(s.refCount--,s.refCount===0){n.delete(i);for(let a=0;a<r.length;a++)r[a]&&r[a].cache.has(i)&&r[a].cache.delete(i);s.controller&&s.controller.abort()}return s.refCount}return 0}function Ue(t,e,i){if(!ie.has(t))return e==null?re.getBlock(t,i):null;const r=ie.get(t);if(r[e]==null){for(let s=0;s<r.length;s++)if(r[s]&&r[s].cache.has(i)){const a=r[s].cache.get(i);return a.refCount++,a.block}return re.getBlock(t,i)}const n=r[e].cache;if(n.has(i)){const s=n.get(i);return s.refCount++,s.block}for(let s=0;s<r.length;s++)if(s!==e&&r[s]&&r[s]&&r[s].cache.has(i)){const a=r[s].cache.get(i);return a.refCount++,n.set(i,a),a.block}return null}function Ve(t,e,i,r,n=null){if(!ie.has(t))return void(e==null&&re.putBlock(t,i,r,n));const s=ie.get(t);if(s[e]==null)return void re.putBlock(t,i,r,n);const a={refCount:1,block:r,isResolved:!1,isRejected:!1,controller:n};r.then(()=>a.isResolved=!0).catch(()=>a.isRejected=!0),s[e].cache.set(i,a)}function gi(t,e,i){if(!ie.has(t))return void(e==null&&re.deleteBlock(t,i));const r=ie.get(t);r[e]!=null?r[e].cache.delete(i):re.deleteBlock(t,i)}const ve=8;let X=class extends at(ot){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=Le();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t&&t.ioConfig&&(t=G($({},t),{ioConfig:$({resolution:null,bandIds:null,sampling:"closest",tileInfo:le.create()},t.ioConfig)})),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=we(t.spatialReference);return M(e)&&t.extent.width>=e/2}set url(t){this._set("url",Qe(t,Ze.getLogger(this.declaredClass)))}async open(t){throw new E("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,r={}){const n=r.tileInfo||this.rasterInfo.storageInfo.tileInfo,s=this.getTileExtentFromTileInfo(t,e,i,n);return this.fetchPixels(s,n.size[0],n.size[1],r)}async identify(t,e={}){e=this._getRequestOptionsWithSliceId(e);const{spatialReference:i,extent:r}=this.rasterInfo,{datumTransformation:n}=e;let s=Ne(t,i,n);if(!r.intersects(s))return{location:s,value:null};if(M(this.rasterInfo.transform)){const w=this.rasterInfo.transform.inverseTransform(s);if(!this.rasterInfo.nativeExtent.intersects(w))return{location:w,value:null};s=w}let a=0;if(e.srcResolution)a=Je(e.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(a=await this.computeBestPyramidLevelForLocation(t,e),a==null)return{location:s,value:null};const u=this.identifyPixelLocation(s,a,null);if(u===null)return{location:s,value:null};const{row:o,col:l,rowOffset:c,colOffset:h}=u,m=Ge(this.url,e.sliceId),f=`${a}/${o}/${l}`;let p=Ue(m,null,f);A(p)&&(p=this.fetchRawTile(a,o,l,e),Ve(m,null,f,p));const y=await p;if(A(y)||!y.pixels||y.pixels.length===0)return{location:s,value:null};const d=c*this.rasterInfo.storageInfo.blockHeight+h,g=!y.mask||y.mask[d]?y.pixels.map(w=>w[d]):null,I=this.rasterInfo.dataType;return(I==="vector-magdir"||I==="vector-uv")&&(g==null?void 0:g.length)>1?{location:s,value:g,magdirValue:I==="vector-magdir"?[g[0],g[1]]:Dt([g[0],g[1]]),pyramidLevel:a}:{location:s,value:g,pyramidLevel:a}}async fetchPixels(t,e,i,r={}){if(t=ei(t),(r=this._getRequestOptionsWithSliceId(r)).requestRawData)return this._fetchPixels(t,e,i,r);const n=we(t.spatialReference),s=ke(t);if(A(n)||s===0||s===1&&this._isGlobalWrappableSource)return this._fetchPixels(t,e,i,r);if(s>=3)return{extent:t,pixelBlock:null};const a=[],{xmin:u,xmax:o}=t,l=Math.round(n/(o-u)*e),c=l-Math.round((n/2-u)/(o-u)*e);let h=0;const m=[];for(let d=0;d<=s;d++){const g=new L({xmin:d===0?u:-n/2,xmax:d===s?o-n*d:n/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),I=d===0?l-c:d===s?e-h:l;h+=I,m.push(I);const w=r.disableWrapAround&&d>0?null:this._fetchPixels(g,I,i,r);a.push(w)}const f=(await Promise.all(a)).map(d=>d==null?void 0:d.pixelBlock);let p=null;const y={width:e,height:i};return this.rasterJobHandler?p=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:m},r)).pixelBlock:p=Ce(f,y,{blockWidths:m}),{extent:t,srcExtent:Pe(t,this.rasterInfo.spatialReference,r.datumTransformation),pixelBlock:p}}async fetchRawPixels(t,e,i,r={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const n=await this._fetchRawTiles(t,e,i,r),{nativeExtent:s,nativePixelSize:a,storageInfo:u}=this.rasterInfo,o=2**t,l=a.x*o,c=a.y*o,h=new L({xmin:s.xmin+l*e.x,xmax:s.xmin+l*(e.x+i.width-1),ymin:s.ymax-c*(e.y+i.height-1),ymax:s.ymax-c*e.y,spatialReference:s.spatialReference});if(!n)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:m,mosaicSize:f}=n;if(m.length===1&&M(m[0])&&m[0].width===i.width&&m[0].height===i.height)return{extent:h,srcExtent:h,pixelBlock:n.pixelBlocks[0]};const p=t>0?u.pyramidBlockWidth:u.blockWidth,y=t>0?u.pyramidBlockHeight:u.blockHeight,d={x:e.x%p,y:e.y%y};let g;return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:f,destDimension:i,clipOffset:d,clipSize:i,coefs:null,sampleSpacing:null,interpolation:r.interpolation,alignmentInfo:null,blockWidths:null},r)).pixelBlock:g=Ce(m,f,{clipOffset:d,clipSize:i}),{extent:h,srcExtent:h,pixelBlock:g}}fetchRawTile(t,e,i,r){throw new E("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return Pe(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?Et(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,i){var r,n;const{customFetchParameters:s}=this.ioConfig,{range:a,query:u,headers:o}=e;i=(r=(n=i)!=null?n:e.retryCount)!=null?r:this.ioConfig.retryCount;const l=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await et(t,G($({},e),{query:$($({},u),s),headers:$($({},o),l)}))}catch(c){if(i>0)return i--,this.request(t,e,i);throw c}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;if(!M(e)||!M(t)||t.length===0)return null;let i=0;const r=t[0].variableName;for(let n=0;n<e.variables.length;n++){const s=e.variables[n],a=s.dimensions;if(s.name!==r){i+=a.map(l=>this._getDimensionValuesCount(l)).reduce((l,c)=>l+c);break}const u=a.map(l=>this._getDimensionValuesCount(l)),o=a.length;for(let l=0;l<o;l++){const c=t.find(f=>f.dimensionName===a[l].name);if(c==null)return null;const h=Array.isArray(c.values[0])?c.values[0][0]:c.values[0],m=this._getIndexFromDimensions(h,a[l]);if(m===-1)return null;u.shift(),i+=l===o-1?m:m*u.reduce((f,p)=>f+p)}}return i}getTileExtentFromTileInfo(t,e,i,r){const n=r.lodAt(t);return this.getTileExtent({x:n.resolution,y:n.resolution},e,i,r.origin,r.spatialReference,r.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:r}=this.rasterInfo;if(!t.tileInfo){const n=[],s=t.maximumPyramidLevel||0;let a=Math.max(r.x,r.y),u=1/.0254*96*a;for(let l=0;l<=s;l++)n.push({level:s-l,resolution:a,scale:u}),a*=2,u*=2;const o=new N({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new le({origin:o,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:n}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,i=512,r){const{width:n,height:s,nativeExtent:a,pixelSize:u,spatialReference:o}=t,l=new N({x:a.xmin,y:a.ymax,spatialReference:o});r==null&&(r=Math.max(0,Math.round(Math.log(Math.max(n,s))/Math.LN2-8)));const c=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[u],r);t.storageInfo=new ye({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:l,firstPyramidLevel:1,maximumPyramidLevel:r,blockBoundary:c})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,r,n,s=0,a=2){if(n.length===1&&s>0){n=[...n];let{x:c,y:h}=n[0];for(let m=0;m<s;m++)c*=a,h*=a,n.push({x:c,y:h})}const u=[],{x:o,y:l}=r;for(let c=0;c<n.length;c++){const{x:h,y:m}=n[c];u.push({minCol:Math.floor((t.xmin-o+.1*h)/e/h),maxCol:Math.floor((t.xmax-o-.1*h)/e/h),minRow:Math.floor((l-t.ymax+.1*m)/i/m),maxRow:Math.floor((l-t.ymin-.1*m)/i/m)})}return u}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo;if(t===0)return e;if(M(i)&&i.length)return i[t-1];const n=r**t;return{x:e.x*n,y:e.y*n}}identifyPixelLocation(t,e,i){const{spatialReference:r,nativeExtent:n}=this.rasterInfo,{blockWidth:s,blockHeight:a,maximumPyramidLevel:u,origin:o}=this.rasterInfo.storageInfo,l=Ne(t,r,i);if(!n.intersects(l)||e<0||e>u)return null;const c=this.getPyramidPixelSize(e),{x:h,y:m}=c,f=(o.y-l.y)/m/a,p=(l.x-o.x)/h/s,y=Math.min(a-1,Math.floor((f-Math.floor(f))*a)),d=Math.min(s-1,Math.floor((p-Math.floor(p))*s));return{pyramidLevel:e,row:Math.floor(f),col:Math.floor(p),rowOffset:y,colOffset:d,srcLocation:l}}getTileExtent(t,e,i,r,n,s){const[a,u]=s,o=r.x+i*a*t.x,l=o+a*t.x,c=r.y-e*u*t.y,h=c-u*t.y;return new L({xmin:o,xmax:l,ymin:h,ymax:c,spatialReference:n})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const r=this.rasterInfo.storageInfo.blockBoundary[t];return!r||r.maxRow<e||r.maxCol<i||r.minRow>e||r.minCol>i}async _fetchPixels(t,e,i,r={}){let n=ke(t);if(n>=2)return{extent:t,pixelBlock:null};const s=this._getSourceDataInfo(t,e,i,r),{pyramidLevel:a,pyramidResolution:u,srcResolution:o,srcExtent:l,srcWidth:c,srcHeight:h}=s;if(c===0||h===0)return{extent:t,srcExtent:l,pixelBlock:null};const m=te(this.rasterInfo.transform),f=(m==null?void 0:m.type)==="gcs-shift",p=M(we(t.spatialReference));!f&&p||(n=ke(s.srcExtent,f));const y=this.rasterInfo.storageInfo,d={x:Math.floor((l.xmin-y.origin.x)/u.x+.1),y:Math.floor((y.origin.y-l.ymax)/u.y+.1)},g=await this._fetchRawTiles(a,d,{width:c,height:h,wrapCount:n},r);if(!g)return{extent:t,srcExtent:l,pixelBlock:null};const I=a>0?y.pyramidBlockWidth:y.blockWidth,w=a>0?y.pyramidBlockHeight:y.blockHeight,C=I===c&&w===h&&d.x%I==0&&d.y%w==0,b=new N({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),R=!t.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:T}=r;if(!R&&C&&g.pixelBlocks.length===1&&I===e&&w===i&&o.x===b.x&&o.y===b.y)return{extent:t,srcExtent:l,pixelBlock:g.pixelBlocks[0]};const _=p&&M(we(l.spatialReference)),S=r.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");S&&!this.rasterJobHandler&&await Le();const k=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:g.extent,pixelSize:b.toJSON(),datumTransformation:T,rasterTransform:m,hasWrapAround:n>0||_,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:S},r):ti({projectedExtent:t,srcBufferExtent:g.extent,pixelSize:b,datumTransformation:T,rasterTransform:m,hasWrapAround:n>0||_,isAdaptive:!1,includeGCSGrid:S});let B;const O=!r.requestRawData,V={rows:k.spacing[0],cols:k.spacing[1]},W=te(this._getRasterTileAlignmentInfo(a,g.extent.xmin)),{pixelBlocks:J,mosaicSize:z,isPartiallyFilled:P}=g;let j=null;if(this.rasterJobHandler)({pixelBlock:B,localNorthDirections:j}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:J,srcMosaicSize:z,destDimension:O?{width:e,height:i}:null,coefs:O?k.coefficients:null,sampleSpacing:O?V:null,projectDirections:S,gcsGrid:S?k.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:r.interpolation,alignmentInfo:W,blockWidths:null},r));else{const F=Ce(J,z,{alignmentInfo:W});B=O?zt(F,{width:e,height:i},k.coefficients,V,r.interpolation):F,S&&k.gcsGrid&&(j=At({width:e,height:i},k.gcsGrid),B=Ht(B,this.rasterInfo.dataType,j))}return r.requestRawData||S?{srcExtent:l,pixelBlock:B,transformGrid:k,localNorthDirections:j,extent:t,isPartiallyFilled:P}:{srcExtent:l,extent:t,pixelBlock:B}}async _fetchRawTiles(t,e,i,r){const{origin:n,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:u}=this.getBlockWidthHeight(t);let{x:o,y:l}=e,{width:c,height:h,wrapCount:m}=i;const f=this._getRasterTileAlignmentInfo(t,0);r.buffer&&(o-=r.buffer.cols,l-=r.buffer.rows,c+=2*r.buffer.cols,h+=2*r.buffer.rows);let p=0,y=0,d=0;m&&M(f)&&({worldColumnCountFromOrigin:y,originColumnOffset:d,rightPadding:p}=f,y*f.blockWidth-p>=o+c&&(p=0));const g=Math.floor(o/a),I=Math.floor(l/u),w=Math.floor((o+c+p-1)/a),C=Math.floor((l+h+p-1)/u),b=s[t];if(!b)return null;const{minRow:R,minCol:T,maxCol:_,maxRow:S}=b;if(m===0&&(C<R||w<T||I>S||g>_))return null;const k=new Array;let B=!1;const O=this.ioConfig.allowPartialFill==null?r.allowPartialFill:this.ioConfig.allowPartialFill;for(let F=I;F<=C;F++)for(let Y=g;Y<=w;Y++){let ge=Y;if(!r.disableWrapAround&&m&&M(f)&&y<=Y&&(ge=Y-y-d),F>=R&&ge>=T&&S>=F&&_>=ge){const De=this._fetchRawTile(t,F,ge,r);O?k.push(new Promise(Ee=>{De.then(nt=>Ee(nt)).catch(()=>{B=!0,Ee(null)})})):k.push(De)}else k.push(null)}if(k.length===0)return null;const V=await Promise.all(k),W={height:(C-I+1)*u,width:(w-g+1)*a},{spatialReference:J}=this.rasterInfo,z=this.getPyramidPixelSize(t),{x:P,y:j}=z;return{extent:new L({xmin:n.x+g*a*P,xmax:n.x+(w+1)*a*P,ymin:n.y-(C+1)*u*j,ymax:n.y-I*u*j,spatialReference:J}),pixelBlocks:V,mosaicSize:W,isPartiallyFilled:B}}_fetchRawTile(t,e,i,r){const n=this.rasterInfo.storageInfo.blockBoundary[t];if(!n)return Promise.resolve(null);const{minRow:s,minCol:a,maxCol:u,maxRow:o}=n;if(e<s||i<a||e>o||i>u)return Promise.resolve(null);const l=Ge(this.url,r.sliceId),c=`${t}/${e}/${i}`;let h=Ue(l,r.registryId,c);if(A(h)){const m=new AbortController;h=this.fetchRawTile(t,e,i,G($({},r),{signal:m.signal})),Ve(l,r.registryId,c,h,m),h.catch(()=>gi(l,r.registryId,c))}return r.signal&&lt(r,()=>{yi(l,r.registryId,c)}),h}_getIndexFromDimensions(t,e){const{extent:i,interval:r,unit:n,values:s}=e;if(s!=null&&s.length)return Array.isArray(s[0])?s.findIndex(l=>l[0]<=t&&l[1]>=t):s.indexOf(t);if(t>i[1])return-1;const a=i[0];let u=-1;if(n==="ISO8601"){var o;switch(((o=e.intervalUnit)==null?void 0:o.toLowerCase())||"seconds"){case"seconds":u=Math.round((t-a)/1e3/r);break;case"minutes":u=Math.round((t-a)/6e4/r);break;case"hours":u=Math.round((t-a)/36e5/r);break;case"days":u=Math.round((t-a)/864e5/r);break;case"years":u=Math.round((new Date(t).getUTCFullYear()-new Date(a).getUTCFullYear())/r);break;case"decades":u=Math.round((new Date(t).getUTCFullYear()-new Date(a).getUTCFullYear())/10/r)}return u}return Math.round((t-a)/r)}_getDimensionValuesCount(t){const{extent:e,interval:i,unit:r,values:n}=t;let s=(n==null?void 0:n.length)||0;if(s)return s;const a=e[0];if(s===0&&r==="ISO8601"){var u;switch(((u=t.intervalUnit)==null?void 0:u.toLowerCase())||"seconds"){case"seconds":s=Math.round((e[1]-e[0])/1e3/i);break;case"minutes":s=Math.round((e[1]-e[0])/6e4/i);break;case"hours":s=Math.round((e[1]-e[0])/36e5/i);break;case"days":s=Math.round((e[1]-e[0])/864e5/i);break;case"years":s=Math.round((new Date(e[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":s=Math.round((new Date(e[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return s}return Math.round((e[1]-e[0])/i)}_getRasterTileAlignmentInfo(t,e){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=ii(this.rasterInfo)),M(this._rasterTileAlighmentInfo.pyramidsInfo)?$({startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform},this._rasterTileAlighmentInfo.pyramidsInfo[t]):null}_getSourceDataInfo(t,e,i,r={}){const n={datumTransformation:r.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};r.srcResolution&&(n.srcResolution=r.srcResolution,this._updateSourceDataInfo(t,n));const s=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:u,pyramidLevel:o}=n,l=a/e,c=u/i,h=o<s&&l*c>=16;if(h||o===s&&(l>ve||c>ve)||a===0||u===0){const m=new N({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference});let f=ri(m,this.rasterInfo.spatialReference,t,n.datumTransformation);const p=!f||r.srcResolution&&f.x+f.y<r.srcResolution.x+r.srcResolution.y;if(h&&r.srcResolution&&p){const y=Math.round(Math.log(Math.max(l,c))/Math.LN2)-1;if(s-o+3>=y){const d=2**y;f={x:r.srcResolution.x*d,y:r.srcResolution.y*d}}}f&&(n.srcResolution=f,this._updateSourceDataInfo(t,n))}return(n.srcWidth/e>ve||n.srcHeight/i>ve)&&(n.srcWidth=0,n.srcHeight=0),n}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:r,datumTransformation:n}=e,{pyramidLevel:s,pyramidResolution:a,excessiveReading:u}=Je(r,this.rasterInfo,this.ioConfig.sampling);if(u)return;let o=e.srcExtent||Pe(t,i,n);if(o==null)return;const l=te(this.rasterInfo.transform);l&&(o=l.inverseTransform(o)),e.srcExtent=o;const c=Math.ceil((o.xmax-o.xmin)/a.x-.1),h=Math.ceil((o.ymax-o.ymin)/a.y-.1);e.pyramidLevel=s,e.pyramidResolution=a,e.srcWidth=c,e.srcHeight=h}_getRequestOptionsWithSliceId(t){return M(this.rasterInfo.multidimensionalInfo)&&t.sliceId==null&&(t=G($({},t),{sliceId:this.getSliceIndex(t.multidimensionalDefinition)})),t}};x([v()],X.prototype,"_rasterTileAlighmentInfo",void 0),x([v({readOnly:!0})],X.prototype,"_isGlobalWrappableSource",null),x([v(tt)],X.prototype,"url",null),x([v({type:String,json:{write:!0}})],X.prototype,"datasetName",void 0),x([v({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),x([v()],X.prototype,"rasterInfo",void 0),x([v()],X.prototype,"ioConfig",void 0),x([v()],X.prototype,"sourceJSON",void 0),X=x([Q("esri.layers.support.rasterDatasets.BaseRaster")],X);const he=X;function xi(t){const e=t.fields,i=t.records,r=e.some(l=>l.name.toLowerCase()==="oid")?"OBJECTID":"OID",n=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(l=>({name:l.name,type:"esriFieldType"+l.typeName,alias:l.name}))),s=n.map(l=>l.name),a=[];let u=0,o=0;return i.forEach(l=>{const c={};for(c[r]=u++,o=1;o<s.length;o++)c[s[o]]=l[o-1];a.push({attributes:c})}),{displayFieldName:"",fields:n,features:a}}class Ii{static get supportedVersions(){return[5]}static parse(e){const i=new DataView(e),r=3&i.getUint8(0);if(r!==3)return{header:{version:r},recordSet:null};const n=i.getUint32(4,!0),s=i.getUint16(8,!0),a=i.getUint16(10,!0),u={version:r,recordCount:n,headerByteCount:s,recordByteCount:a};let o=32;const l=[],c=[];let h;if(r===3){for(;i.getUint8(o)!==13;)h=String.fromCharCode(i.getUint8(o+11)).trim(),l.push({name:He(new Uint8Array(e,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:i.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<n&&e.byteLength-o>a;){const m=[];i.getUint8(o)===32?(o+=1,l.forEach(f=>{if(f.type==="C")m.push(He(new Uint8Array(e,o,f.length)).trim());else if(f.type==="N")m.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim(),10));else if(f.type==="F")m.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim()));else if(f.type==="D"){const p=String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim();m.push(new Date(parseInt(p.substring(0,4),10),parseInt(p.substring(4,6),10)-1,parseInt(p.substring(6,8),10)))}o+=f.length}),c.push(m)):o+=a}}return{header:u,fields:l,records:c,recordSet:xi({fields:l,records:c})}}}const se=new Map;se.set("int16","esriFieldTypeSmallInteger"),se.set("int32","esriFieldTypeInteger"),se.set("int64","esriFieldTypeInteger"),se.set("float32","esriFieldTypeSingle"),se.set("float64","esriFieldTypeDouble"),se.set("text","esriFieldTypeString");const Ye=8;let fe=class extends he{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(t){await this.init();const{data:e}=await this.request(this.url+"/conf.json",{signal:t==null?void 0:t.signal});if(!this._validateHeader(e))throw new E("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:r}=this._parseHeader(e);if(r.dataType==="thematic"){const n=await this._fetchAuxiliaryInformation();r.attributeTable=n}this._set("storageInfo",i),this._set("rasterInfo",r),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(t,e,i,r={}){const n=this.rasterInfo.storageInfo.maximumPyramidLevel-t;if(n<0)return null;const s=this._buildCacheFilePath(n,e,i,r.multidimensionalDefinition),a=this._getIndexRecordFromBundle(e,i),u=await this.request(s,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:r.signal});if(!u)return null;const o=new Uint8Array(u.data),l=this._getTileEndAndContentType(o,a);if(l.recordSize===0)return null;const c=await this.request(s,{range:{from:l.position,to:l.position+l.recordSize},responseType:"array-buffer",signal:r.signal});return c?this.decodePixelBlock(c.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(t){const e=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return t&&t.type==="RasterInfo"&&!e.some(i=>!t[i])}_parseHeader(t){var e,i;const r=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][t.pixelType],{bandCount:n,histograms:s,colormap:a,blockWidth:u,blockHeight:o,firstPyramidLevel:l,maximumPyramidLevel:c}=t,h=t.statistics&&t.statistics.map(F=>({min:F.min,max:F.max,avg:F.mean,stddev:F.standardDeviation,median:F.median,mode:F.mode})),m=t.extent.spatialReference,f=(e=t.geodataXform)==null?void 0:e.spatialReference,p=new U(m!=null&&m.wkid||m!=null&&m.wkt?m:f);let y=new L({xmin:t.extent.xmin,ymin:t.extent.ymin,xmax:t.extent.xmax,ymax:t.extent.ymax,spatialReference:p});const d=new N({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:p}),g=Math.round((y.xmax-y.xmin)/d.x),I=Math.round((y.ymax-y.ymin)/d.y),w=this._parseTransform(t.geodataXform),C=w?y:null;w&&(y=w.forwardTransform(y),d.x=(y.xmax-y.xmin)/g,d.y=(y.ymax-y.ymin)/I);const b=(i=t.properties)!=null?i:{},R=t.format.toLowerCase().replace("cache/",""),T=new N(t.origin.x,t.origin.y,p);let _,S,k,B;if(a&&a.colors)for(_=[],S=0;S<a.colors.length;S++)k=a.colors[S],B=a.values?a.values[S]:S,_.push([B,255&k,k<<16>>>24,k<<8>>>24,k>>>24]);const O=t.LODInfos,V=[];for(S=0;S<O.levels.length;S++)V.push({level:O.levels[S],resolution:O.resolutions[S],scale:96/.0254*O.resolutions[S]});const W=new le({dpi:96,lods:V,format:R,origin:T,size:[u,o],spatialReference:p}),J={recordSize:Ye,packetSize:t.packetSize,headerSize:t.packetSize*t.packetSize*Ye+64},z=[{maxCol:Math.ceil(g/u)-1,maxRow:Math.ceil(I/o)-1,minCol:0,minRow:0}];let P=2;if(c>0)for(S=0;S<c;S++)z.push({maxCol:Math.ceil(g/P/u)-1,maxRow:Math.ceil(I/P/o)-1,minCol:0,minRow:0}),P*=2;const j=t.mdInfo;return{storageInfo:J,rasterInfo:new ue({width:g,height:I,pixelType:r,bandCount:n,extent:y,nativeExtent:C,transform:w,spatialReference:p,pixelSize:d,keyProperties:b,statistics:h,histograms:s,multidimensionalInfo:j,colormap:_,storageInfo:new ye({blockWidth:u,blockHeight:o,pyramidBlockWidth:u,pyramidBlockHeight:o,origin:T,tileInfo:W,firstPyramidLevel:l,maximumPyramidLevel:c,blockBoundary:z})})}}_parseTransform(t){var e,i;if(!si(t))throw new E("cloudraster:open","the data contains unsupported geodata transform types");const r=ni(t);if(r.type==="identity")return null;if(r.type!=="polynomial"||(e=r.forwardCoefficients)==null||!e.length||(i=r.inverseCoefficients)==null||!i.length)throw new E("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(t){const e=this.request(this.url+"/conf.vat.json",{signal:t}).then(s=>s.data).catch(()=>null),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:t}).then(s=>s.data).catch(()=>null),r=await Promise.all([e,i]);let n;if(r[0]){let s=r[0].fields;const a=r[0].values;if(s&&a){s=s.map(o=>({type:o.name==="OID"?"esriFieldTypeOID":se.get(o.type),name:o.name,alias:o.alias||o.name}));const u=a.map(o=>({attributes:o}));s&&a&&(n={fields:s,features:u})}}return!n&&r[1]&&(n=Ii.parse(r[1]).recordSet),it.fromJSON(n)}_buildCacheFilePath(t,e,i,r){const n=this.storageInfo.packetSize,s=Math.floor(e/n)*n,a=Math.floor(i/n)*n,u="R"+this._toHexString4(s)+"C"+this._toHexString4(a);let o="L";o+=t>=10?t.toString():"0"+t.toString();const{multidimensionalInfo:l}=this.rasterInfo,c=r==null?void 0:r[0];if(!M(l)||!c)return`${this.url}/_alllayers/${o}/${u}.bundle`;let h=l.variables.find(f=>f.name===c.variableName).dimensions[0].values.indexOf(c.values[0]).toString(16);const m=4-h.length;for(let f=0;f<m;f++)h="0"+h;return h="S"+h,`${this.url}/_alllayers/${c.variableName}/${h}/${o}/${u}.bundle`}_getIndexRecordFromBundle(t,e){const i=this.storageInfo.packetSize,r=i*(t%i)+e%i;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(t,e){const i=t.subarray(e,e+8);let r,n=0;for(r=0;r<5;r++)n|=(255&i[r])<<8*r;const s=0xffffffffff&n;for(n=0,r=5;r<8;r++)n|=(255&i[r])<<8*(r-5);return{position:s,recordSize:0xffffffffff&n}}_toHexString4(t){let e=t.toString(16);if(e.length!==4){let i=4-e.length;for(;i-- >0;)e="0"+e}return e}};x([v({readOnly:!0})],fe.prototype,"storageInfo",void 0),x([v({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),fe=x([Q("esri.layers.support.rasterDatasets.CloudRaster")],fe);const wi=fe;let de=class extends he{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(t){var e;await this.init();const{pixelBlock:i,statistics:r,histograms:n,name:s,keyProperties:a,nativeExtent:u,transform:o}=this.data,{width:l,height:c,pixelType:h}=i,m=this.data.extent||new L({xmin:-.5,ymin:.5,xmax:l-.5,ymax:c-.5,spatialReference:new U({wkid:3857})}),f=(e=this.data.isPseudoSpatialReference)!=null?e:!this.data.extent,p={x:m.width/l,y:m.height/c},y=new ue({width:l,height:c,pixelType:h,extent:m,nativeExtent:u,transform:o,pixelSize:p,spatialReference:m.spatialReference,bandCount:3,keyProperties:a||{},statistics:r,isPseudoSpatialReference:f,histograms:n});this.createRemoteDatasetStorageInfo(y,512,512),this._set("rasterInfo",y),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},t),this.datasetName=s,this.url="/InMemory/"+s}fetchRawTile(t,e,i,r={}){const n=this._pixelBlockTiles.get(`${t}/${e}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(t,e,i){const r=this.rasterInfo.storageInfo.maximumPyramidLevel,n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:r},i):Promise.resolve(Wt(t,e,r)),s=M(this.rasterInfo.statistics),a=M(this.rasterInfo.histograms),u=s&&a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},i):Promise.resolve(jt(t)),o=await rt([n,u]);if(!o[0].value&&o[1].value)throw new E("inmemory-raster:open","failed to build in memory raster");var l,c;this._pixelBlockTiles=o[0].value,s||(this.rasterInfo.statistics=(l=o[1].value)==null?void 0:l.statistics),a&&(this.rasterInfo.histograms=(c=o[1].value)==null?void 0:c.histograms)}};x([v({type:String,json:{write:!0}})],de.prototype,"datasetFormat",void 0),x([v()],de.prototype,"data",void 0),de=x([Q("esri.layers.support.rasterDatasets.InMemoryRaster")],de);const vi=de;function ce(t,e){if(!t||!e)return[];let i=e;e.indexOf("/")>-1?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const r=[];if(e){const s=ce(t,i);for(let a=0;a<s.length;a++)ce(s[a],e).forEach(u=>r.push(u));return r}const n=t.getElementsByTagNameNS("*",i);if(!n||n.length===0)return[];for(let s=0;s<n.length;s++)r.push(n[s]||n.item[s]);return r}function q(t,e){if(!t||!e)return null;let i=e;e.indexOf("/")>-1?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const r=ce(t,i);return r.length>0?e?q(r[0],e):r[0]:null}function Z(t,e=null){const i=e?q(t,e):t;let r;return i?(r=i.textContent||i.nodeValue,r?r.trim():null):null}function bi(t,e){const i=ce(t,e),r=[];let n;for(let s=0;s<i.length;s++)n=i[s].textContent||i[s].nodeValue,n&&(n=n.trim(),n!==""&&r.push(n));return r}function be(t,e){return bi(t,e).map(i=>Number(i))}function ae(t,e){const i=Z(t,e);return Number(i)}function Me(t,e){var i;const r=t==null||(i=t.nodeName)==null?void 0:i.toLowerCase(),n=e.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===n}function Xe(t,e){if(!t||!e)return null;const i=[];for(let r=0;r<t.length;r++)i.push(t[r]),i.push(e[r]);return i}function Si(t){var e;const i=q(t,"GeodataXform"),r=_e(ae(i,"SpatialReference/WKID")||Z(i,"SpatialReference/WKT"));if(i.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const n=(e=ae(i,"PolynomialOrder"))!=null?e:1,s=be(i,"CoeffX/Double"),a=be(i,"CoeffY/Double"),u=be(i,"InverseCoeffX/Double"),o=be(i,"InverseCoeffY/Double"),l=Xe(s,a),c=Xe(u,o);return{spatialReference:r,transform:new Be({spatialReference:r,polynomialOrder:n,forwardCoefficients:l,inverseCoefficients:c})}}function Ti(t){var e;const i=ae(t,"NoDataValue"),r=q(t,"Histograms/HistItem"),n=ae(r,"HistMin"),s=ae(r,"HistMax"),a=ae(r,"BucketCount"),u=(e=Z(r,"HistCounts"))==null?void 0:e.split("|").map(f=>Number(f));let o,l,c,h;ce(t,"Metadata/MDI").forEach(f=>{var p;const y=Number((p=f.textContent)!=null?p:f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=y;break;case"STATISTICS_MAXIMUM":l=y;break;case"STATISTICS_MEAN":c=y;break;case"STATISTICS_STDDEV":h=y}});const m=ae(t,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:u!=null&&u.length&&o!=null&&l!=null?{min:n,max:s,size:a||u.length,counts:u}:null,sourceBandIndex:m,statistics:o!=null&&l!=null?{min:o,max:l,avg:c,stddev:h}:null}}function _e(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new U({wkid:e});if((t=String(t)).startsWith("COMPD_CS")){if(!t.includes("VERTCS")||!t.includes("GEOGCS")&&!t.startsWith("PROJCS"))return null;const i=t.indexOf("VERTCS"),r=t.indexOf("PROJCS"),n=r>-1?r:t.indexOf("GEOGCS");if(n===-1)return null;const s=t.slice(n,t.lastIndexOf("]",i)+1).trim(),a=t.slice(i,t.lastIndexOf("]")).trim();e=Oe(s);const u=new U(e?{wkid:e}:{wkt:s}),o=Oe(a);return o&&(u.vcsWkid=o),u}return t.startsWith("GEOGCS")||t.startsWith("PROJCS")?(e=Oe(t),new U(e!==0?{wkid:e}:{wkt:t})):null}function Oe(t){var e;const i=t.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(s=>s.trim()).filter(s=>s!==""),r=i[i.length-1].split(","),n=(e=r[0])==null?void 0:e.toLowerCase();if((n==="epsg"||n==="esri")&&t.endsWith('"]]')){const s=Number(r[1]);if(!isNaN(s)&&s!==0)return s}return 0}function $e(t){var e;if((t==null||(e=t.documentElement.tagName)==null?void 0:e.toLowerCase())!=="pamdataset")return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(n=>{if(n.nodeType===1){if(Me(n,"SRS")){if(!i.spatialReference){const s=Z(n);i.spatialReference=_e(s)}}else if(Me(n,"Metadata"))if(n.getAttribute("domain")==="xml:ESRI"){const{spatialReference:s,transform:a}=Si(n);i.transform=a,i.spatialReference||(i.spatialReference=s)}else ce(n,"MDI").forEach(s=>i.metadata[s.getAttribute("key")]=Z(s));else if(Me(n,"PAMRasterBand")){const s=Ti(n);s.sourceBandIndex!=null&&i.rasterBands[s.sourceBandIndex]==null?i.rasterBands[s.sourceBandIndex]=s:i.rasterBands.push(s)}}});const r=i.rasterBands;if(r){const n=!!r[0].statistics;i.statistics=n?r.map(a=>a.statistics):null;const s=!!r[0].histogram;i.histograms=s?r.map(a=>a.histogram):null}return i}let Re=class extends he{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:i,statistics:r,histograms:n,transform:s}=await this._fetchAuxiliaryData(t);const a=!i;a&&(i=new U({wkid:3857})),n!=null&&n.length&&r==null&&(r=Fe(n));const{width:u,height:o}=e;let l=new L({xmin:-.5,ymin:.5-o,xmax:u-.5,ymax:.5,spatialReference:i});const c=s?s.forwardTransform(l):l;let h=!0;if(s){const f=s.forwardCoefficients;h=f&&f[1]===0&&f[2]===0,h&&(s=null,l=c)}const m=new vi({data:{extent:c,nativeExtent:l,transform:s,pixelBlock:e,statistics:r,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await m.open(),this._set("rasterInfo",m.rasterInfo),this._inMemoryRaster=m}fetchRawTile(t,e,i,r={}){return this._inMemoryRaster.fetchRawTile(t,e,i,r)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t==null?void 0:t.signal}),i=qt(e).toUpperCase();if(i!=="JPG"&&i!=="PNG"&&i!=="GIF"&&i!=="BMP")throw new E("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(e,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(t){var e,i;const r=te(t==null?void 0:t.signal),n=(e=this.ioConfig.skipExtensions)!=null?e:[],s=n.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:r}),a=this.datasetFormat,u=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,o=n.indexOf(u)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+u,{responseType:"text",signal:r}),l=await rt([s,o]);if(r!=null&&r.aborted)throw _t();const c=$e((i=l[0].value)==null?void 0:i.data);if(!c.transform){const h=l[1].value?l[1].value.data.split(`
`).slice(0,6).map(m=>Number(m)):null;c.transform=(h==null?void 0:h.length)===6?new Be({forwardCoefficients:[h[4],h[5],h[0],-h[1],h[2],-h[3]]}):null}return c}};x([v({type:String,json:{write:!0}})],Re.prototype,"datasetFormat",void 0),Re=x([Q("esri.layers.support.rasterDatasets.ImageAuxRaster")],Re);const Se=Re;let me=class extends he{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(t){await this.init();const e=t&&t.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const r=i.data;if(this.sourceJSON=r,!r)throw new E("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!r.tileInfo)throw new E("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=r.cacheType,this.tileType==null&&(n.indexOf(r.tileInfo.format.toLowerCase())>-1?this.tileType="Map":r.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=r.name.slice(r.name.indexOf("/")+1);const s=await this._fetchRasterInfo({signal:e});if(!M(s))throw new E("image-server-raster:open","cannot initialize image service");{const a=this.tileType==="Map"?oi(r.tileInfo,r):le.fromJSON(r.tileInfo),{extent:u,pixelSize:o}=s,l=.5/s.width*o.x;let c,h;const m=a.lodAt(Math.max.apply(null,a.lods.map(b=>b.level)));this.tileType!=="Map"&&r.maxScale!==0&&(this.tileType==="Raster"?(c=a.lods.find(b=>b.resolution===o.x),c||(c=a.lods[a.lods.length-1])):(c=a.lods.find(b=>Math.abs(b.scale-r.maxScale)<l),c||(c=a.lods.filter(b=>b.scale>r.maxScale).sort((b,R)=>b.scale>R.scale?1:-1)[0])),o.x=o.y=c.resolution,s.width=Math.ceil((u.xmax-u.xmin)/o.x-.1),s.height=Math.ceil((u.ymax-u.ymin)/o.y-.1)),c||(c=m);const f=a.lodAt(Math.min.apply(null,a.lods.map(b=>b.level)));this.tileType==="Map"?this._levelOffset=a.lods[0].level:r.minScale!==0&&this.tileType==="Elevation"&&(h=a.lods.find(b=>Math.abs(b.scale-r.minScale)<l),this._levelOffset=h.level-f.level),h||(h=f);const p=Math.max(o.x,o.y);(Math.abs(o.x-o.y)>l||!a.lods.some(b=>Math.abs(b.resolution-p)<l))&&(o.x=o.y=c.resolution,s.width=Math.ceil((u.xmax-u.xmin)/o.x-.1),s.height=Math.ceil((u.ymax-u.ymin)/o.y-.1));const y=c.level-h.level,[d,g]=a.size,I=[];a.lods.forEach(b=>{b.level>=h.level&&b.level<=c.level&&I.push({x:b.resolution,y:b.resolution})}),I.sort((b,R)=>b.x-R.x);const w=this.computeBlockBoundary(u,d,g,a.origin,I,y),C=I.length>1?I.slice(1):null;s.storageInfo=new ye({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:C,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:a,blockBoundary:w}),this._fixGCSShift(s),this._set("rasterInfo",s)}if(r.capabilities.toLowerCase().indexOf("tilemap")>-1){const a={tileInfo:s.storageInfo.tileInfo,parsedUrl:Ct(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new li({layer:a})}}async fetchRawTile(t,e,i,r={}){if(this._slices&&r.sliceId==null)return null;const{storageInfo:n,extent:s}=this.rasterInfo,a=n.maximumPyramidLevel-t+this._levelOffset,u=`${this.url}/tile/${a}/${e}/${i}`,o=this._slices?{sliceId:r.sliceId||0}:null,{data:l}=await this.request(u,{query:o,responseType:"array-buffer",signal:r.signal});if(!l)return null;const c=await this.decodePixelBlock(l,{width:n.tileInfo.size[0],height:n.tileInfo.size[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation"}),h=n.blockBoundary[t];if(n.compression!=="jpg"||i>h.minCol&&i<h.maxCol&&e>h.minRow&&e<h.maxRow)return c;const{origin:m,blockWidth:f,blockHeight:p}=n,{x:y,y:d}=this.getPyramidPixelSize(t),g=Math.round((s.xmin-m.x)/y)%f,I=Math.round((s.xmax-m.x)/y)%f||f,w=Math.round((m.y-s.ymax)/d)%p,C=Math.round((m.y-s.ymin)/d)%p||p,b=i===h.minCol?g:0,R=e===h.minRow?w:0,T=i===h.maxCol?I:f,_=e===h.maxRow?C:p;return Gt(c,{x:b,y:R},{width:T-b,height:_-R}),c}getSliceIndex(t){if(!this._slices||A(t)||t.length===0)return null;const e=t;for(let i=0;i<this._slices.length;i++){const r=this._slices[i].multidimensionalDefinition;if(r.length===e.length&&!r.some(n=>{const s=e.find(a=>n.variableName===a.variableName&&a.dimensionName===n.dimensionName);return s?(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0])!==(Array.isArray(s.values[0])?`${s.values[0][0]}-${s.values[0][1]}`:s.values[0]):!0}))return i}return null}async fetchVariableStatisticsHistograms(t,e){const i=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(s=>{var a;return(a=s.data)==null?void 0:a.statistics}),r=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(s=>{var a;return(a=s.data)==null?void 0:a.histograms}),n=await Promise.all([i,r]);return n[0]&&n[0].forEach(s=>{s.avg=s.mean,s.stddev=s.standardDeviation}),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(t,0,te(e.datumTransformation));if(i===null)return null;let r=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let s=n-r+this._levelOffset;const a=i.srcLocation;for(;s>=0;){try{if(await this._tilemapCache.fetchAvailability(s,i.row,i.col,e)==="available")break}catch{}if(s--,r++,i=this.identifyPixelLocation(a,r,te(e.datumTransformation)),i===null)return null}return s===-1||i==null?null:r}async _fetchRasterInfo(t){const e=this.sourceJSON,i=Math.ceil((e.extent.xmax-e.extent.xmin)/e.pixelSizeX-.1),r=Math.ceil((e.extent.ymax-e.extent.ymin)/e.pixelSizeY-.1),n=U.fromJSON(e.spatialReference||e.extent.spatialReference);if(this.tileType==="Map")return new ue({width:i,height:r,bandCount:3,extent:L.fromJSON(e.extent),spatialReference:n,pixelSize:new N({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:s,signal:a}=t,u=!!e.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:s,f:"json"},signal:a}).then(f=>it.fromJSON(f.data)).catch(()=>null),o=!!e.hasColormap&&this.request(this.url+"/colormap",{query:{slice:s,f:"json"},signal:a}).then(f=>{var p;return(p=f.data)==null?void 0:p.colormap}),l=!!e.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:s,f:"json"},signal:a}).then(f=>{var p;return(p=f.data)==null?void 0:p.histograms}),c=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:a}).then(f=>f.data).catch(()=>{}),h=!!e.hasMultidimensions&&this._fetchMultidimensionalInfo(),m=!!e.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:a}).then(f=>f.data&&f.data.slices).catch(()=>{});return Promise.all([u,o,l,c,h,m]).then(f=>{let p=null;if(e.minValues&&e.minValues.length===e.bandCount){p=[];for(let y=0;y<e.minValues.length;y++)p.push({min:e.minValues[y],max:e.maxValues[y],avg:e.meanValues[y],stddev:e.stdvValues[y]})}return this._slices=f[5]||null,new ue({width:i,height:r,bandCount:e.bandCount,extent:L.fromJSON(e.extent),spatialReference:n,pixelSize:new N({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n}),pixelType:e.pixelType.toLowerCase(),statistics:p,attributeTable:f[0]||null,colormap:f[1]||null,histograms:f[2]||null,keyProperties:f[3]||{},multidimensionalInfo:f[4]||null})})}async _fetchMultidimensionalInfo(t){var e;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:t}).then(r=>{var n;return(n=r.data)==null?void 0:n.multidimensionalInfo});return(e=i.variables)!=null&&e.length&&i.variables.forEach(r=>{var n;(n=r.statistics)!=null&&n.length&&r.statistics.forEach(s=>{s.avg=s.mean,s.stddev=s.standardDeviation})}),i}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_fixGCSShift(t){const{extent:e,spatialReference:i}=t;e.xmin===0&&e.xmax===360&&i.wkid&&i.isGeographic&&(t.nativeExtent=t.extent,t.transform=new ai,t.extent=t.transform.forwardTransform(e))}};x([v({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0),x([v()],me.prototype,"tileType",void 0),me=x([Q("esri.layers.support.rasterDatasets.ImageServerRaster")],me);const Ri=me,K=new Map;K.set("Int8","s8"),K.set("UInt8","u8"),K.set("Int16","s16"),K.set("UInt16","u16"),K.set("Int32","s32"),K.set("UInt32","u32"),K.set("Float32","f32"),K.set("Float64","f32"),K.set("Double64","f32");const ee=new Map;ee.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ee.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ee.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ee.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let oe=class extends he{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){var e;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=t?te(t.signal):null,r=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:n,files:s}=this._parseHeader(r.data);if(((e=this.ioConfig.skipExtensions)==null?void 0:e.indexOf("aux.xml"))===-1){const g=await this._fetchAuxiliaryData(t);var a;g!=null&&(n.statistics=(a=g.statistics)!=null?a:n.statistics,n.histograms=g.histograms,g.histograms&&!M(n.statistics)&&(n.statistics=Fe(g.histograms)))}this._set("rasterInfo",n),this._files=s;const u=await this.request(s.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(u.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:m}=this.rasterInfo,f=[],p=this._getBandSegmentCount();let y=0,d=-1;for(;y<this._storageIndex.length;){d++;const g=Math.ceil(h/o/c**d)-1,I=Math.ceil(m/l/c**d)-1;y+=(g+1)*(I+1)*p*4,f.push({maxRow:I,maxCol:g,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}async fetchRawTile(t,e,i,r={}){const{blockWidth:n,blockHeight:s,blockBoundary:a}=this.rasterInfo.storageInfo,u=a[t];if(!u||u.maxRow<e||u.maxCol<i||u.minRow>e||u.minCol>i)return null;const{bandCount:o,pixelType:l}=this.rasterInfo,{ranges:c,actualTileWidth:h,actualTileHeight:m}=this._getTileLocation(t,e,i);if(!c||c.length===0)return null;if(c[0].from===0&&c[0].to===0){const S=new Uint8Array(n*s);return new Ut({width:n,height:s,pixels:null,mask:S,validPixelCount:0})}const{bandIds:f}=this.ioConfig,p=this._getBandSegmentCount(),y=[];let d=0;for(d=0;d<p;d++)(!f||f.indexOf[d]>-1)&&y.push(this.request(this._files.data,{range:{from:c[d].from,to:c[d].to},responseType:"array-buffer",signal:r.signal}));const g=await Promise.all(y),I=g.map(S=>S.data.byteLength).reduce((S,k)=>S+k),w=new Uint8Array(I);let C=0;for(d=0;d<p;d++)w.set(new Uint8Array(g[d].data),C),C+=g[d].data.byteLength;const b=ee.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(w.buffer,{width:n,height:s,format:b,planes:(f==null?void 0:f.length)||o,pixelType:l});if(M(this.rasterInfo.noDataValue)&&b!=="lerc"&&!R.mask){const S=this.rasterInfo.noDataValue[0];if(S!=null){const k=R.width*R.height,B=new Uint8Array(k);if(Math.abs(S)>1e24)for(d=0;d<k;d++)Math.abs((R.pixels[0][d]-S)/S)>1e-6&&(B[d]=1);else for(d=0;d<k;d++)R.pixels[0][d]!==S&&(B[d]=1);R.mask=B}}let T=0,_=0;if(h!==n||m!==s){let S=R.mask;if(S)for(d=0;d<s;d++)if(_=d*n,d<m)for(T=h;T<n;T++)S[_+T]=0;else for(T=0;T<n;T++)S[_+T]=0;else for(S=new Uint8Array(n*s),R.mask=S,d=0;d<m;d++)for(_=d*n,T=0;T<h;T++)S[_+T]=1}return R}_parseIndex(t){if(t.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let e,i,r,n,s,a;if(Vt){for(i=new Uint8Array(t),n=new ArrayBuffer(t.byteLength),r=new Uint8Array(n),s=0;s<t.byteLength/4;s++)for(a=0;a<4;a++)r[4*s+a]=i[4*s+3-a];e=new Uint32Array(n)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return ee.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,i){const{blockWidth:r,blockHeight:n,pyramidScalingFactor:s}=this.rasterInfo.storageInfo,{width:a,height:u}=this.rasterInfo,o=this._getBandSegmentCount();let l,c,h,m=0,f=0;for(h=0;h<t;h++)f=s**h,l=Math.ceil(a/r/f),c=Math.ceil(u/n/f),m+=l*c;f=s**t,l=Math.ceil(a/r/f),c=Math.ceil(u/n/f),m+=e*l+i,m*=4*o;const p=this._storageIndex.subarray(m,m+4*o);let y=0,d=0;const g=[];for(let I=0;I<o;I++)y=p[4*I+0]*2**32+p[4*I+1],d=y+p[4*I+2]*2**32+p[4*I+3],g.push({from:y,to:d});return{ranges:g,actualTileWidth:i<l-1?r:Math.ceil(a/f)-r*(l-1),actualTileHeight:e<c-1?n:Math.ceil(u/f)-n*(c-1)}}_parseHeader(t){const e=q(t,"MRF_META/Raster");if(!e)throw new E("mrf:open","not a valid MRF format");const i=q(e,"Size"),r=parseInt(i.getAttribute("x"),10),n=parseInt(i.getAttribute("y"),10),s=parseInt(i.getAttribute("c"),10),a=(Z(e,"Compression")||"none").toLowerCase();if(!ee.has(a))throw new E("mrf:open","currently does not support compression "+a);const u=Z(e,"DataType")||"UInt8",o=K.get(u);if(o==null)throw new E("mrf:open","currently does not support pixel type "+u);const l=q(e,"PageSize"),c=parseInt(l.getAttribute("x"),10),h=parseInt(l.getAttribute("y"),10),m=q(e,"DataValues");let f,p;if(m&&(p=m.getAttribute("NoData"),p!=null&&(f=p.trim().split(" ").map(B=>parseFloat(B)))),q(t,"MRF_META/CachedSource"))throw new E("mrf:open","currently does not support MRF referencing other data files");const y=q(t,"MRF_META/GeoTags"),d=q(y,"BoundingBox");let g,I=!1;if(d!=null){const B=parseFloat(d.getAttribute("minx")),O=parseFloat(d.getAttribute("miny")),V=parseFloat(d.getAttribute("maxx")),W=parseFloat(d.getAttribute("maxy")),J=Z(y,"Projection")||"";let z;if(J!=="LOCAL_CS[]")if(J.toLowerCase().startsWith("epsg:")){const P=Number(J.slice(5));isNaN(P)||P===0||(z=new U({wkid:P}))}else z=_e(J);else I=!0,z=new U({wkid:3857});g=new L(B,O,V,W),g.spatialReference=z}else I=!0,g=new L({xmin:-.5,ymin:.5-n,xmax:r-.5,ymax:.5,spatialReference:new U({wkid:3857})});const w=q(t,"MRF_META/Rsets"),C=parseInt(w&&w.getAttribute("scale")||"2",10),b=g.spatialReference,R=new ye({origin:new N({x:g.xmin,y:g.ymax,spatialReference:b}),blockWidth:c,blockHeight:h,pyramidBlockWidth:c,pyramidBlockHeight:h,compression:a,pyramidScalingFactor:C}),T=new N({x:g.width/r,y:g.height/n,spatialReference:b}),_=new ue({width:r,height:n,extent:g,isPseudoSpatialReference:I,spatialReference:b,bandCount:s,pixelType:o,pixelSize:T,noDataValue:f,storageInfo:R}),S=Z(t,"datafile"),k=Z(t,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:S||this.url.replace(".mrf",ee.get(a).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return $e(e)}catch{return null}}};x([v()],oe.prototype,"_files",void 0),x([v()],oe.prototype,"_storageIndex",void 0),x([v({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=x([Q("esri.layers.support.rasterIO.MRFRaster")],oe);const _i=oe,Ke=function(t,e){const i=t.get(e);return i&&i.values},Te=function(t,e){const i=t.get(e);return i&&i.values[0]};let ne=class extends he{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){var e,i,r;await this.init();const n=t?te(t.signal):null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:n});if(!s)throw new E("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:a,firstIFD:u,isBigTiff:o}=Yt(s),l=[];await this._readIFDs(l,s,a,u,0,o?8:4,n);const c=Xt(l),{width:h,height:m,tileWidth:f,tileHeight:p,planes:y,pixelType:d,compression:g,firstPyramidLevel:I,maximumPyramidLevel:w,pyramidBlockWidth:C,pyramidBlockHeight:b,tileBoundary:R,affine:T,metadata:_}=c,S=((e=c.extent.spatialReference)==null?void 0:e.wkt)||((i=c.extent.spatialReference)==null?void 0:i.wkid);let k=_e(S),B=!1;k==null&&(B=!0,k=new U({wkid:3857}));const O=new L(G($({},c.extent),{spatialReference:k})),V=new N(O?{x:O.xmin,y:O.ymax,spatialReference:k}:{x:0,y:0}),W=new ye({blockWidth:f,blockHeight:p,pyramidBlockWidth:C,pyramidBlockHeight:b,compression:g,origin:V,firstPyramidLevel:I,maximumPyramidLevel:w,blockBoundary:R}),J=new N({x:(O.xmax-O.xmin)/h,y:(O.ymax-O.ymin)/m,spatialReference:k}),z=_?{BandProperties:_.bandProperties,DataType:_.dataType}:{},P=new ue({width:h,height:m,bandCount:y,pixelType:d,compression:g,pixelSize:J,storageInfo:W,spatialReference:k,isPseudoSpatialReference:B,keyProperties:z,extent:O,statistics:_?_.statistics:null});if(T!=null&&T.length&&(P.nativeExtent=new L({xmin:-.5,ymin:.5-m,xmax:h-.5,ymax:.5,spatialReference:k}),P.transform=new Be({polynomialOrder:1,forwardCoefficients:[T[2]+T[0]/2,T[5]-T[3]/2,T[0],T[3],-T[1],-T[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new N({x:(O.xmax-O.xmin)/h,y:(O.ymax-O.ymin)/m,spatialReference:k}),W.origin.x=-.5,W.origin.y=.5),(r=this.ioConfig.skipExtensions)==null||!r.includes("aux.xml")){const F=await this._fetchAuxiliaryData(t);if(F!=null){var j;if(P.statistics=(j=F.statistics)!=null?j:P.statistics,P.histograms=F.histograms,F.histograms&&!M(P.statistics)&&(P.statistics=Fe(F.histograms)),F.transform&&!T){P.transform=F.transform,P.nativeExtent=P.extent;const Y=P.transform.forwardTransform(P.nativeExtent);P.pixelSize=new N({x:(Y.xmax-Y.xmin)/h,y:(Y.ymax-Y.ymin)/m,spatialReference:k}),P.extent=Y}P.spatialReference||(P.spatialReference=F.spatialReference)}}if(this._set("rasterInfo",P),this._headerInfo=$({littleEndian:a,isBigTiff:o,ifds:l},c),!this._headerInfo.isSupported)throw new E("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(t,e,i,r={}){var n;if((n=this._headerInfo)==null||!n.isSupported||this.isBlockOutside(t,e,i))return null;const s=this._getTileLocation(t,e,i);if(!s)return null;const{ranges:a,actualTileWidth:u,actualTileHeight:o,ifd:l}=s,c=a.map(R=>this.request(this.url,{range:R,responseType:"array-buffer",signal:r.signal})),h=await Promise.all(c),m=h.map(R=>R.data.byteLength).reduce((R,T)=>R+T),f=h.length===1?h[0].data:new ArrayBuffer(m),p=[0],y=[0];if(h.length>1){const R=new Uint8Array(f);for(let T=0,_=0;T<h.length;T++){const S=h[T].data;R.set(new Uint8Array(S),_),p[T]=_,_+=S.byteLength,y[T]=S.byteLength}}const{blockWidth:d,blockHeight:g}=this.getBlockWidthHeight(t),I=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:p,sizes:y},width:d,height:g,planes:null,pixelType:null});let w,C,b;if(u!==d||o!==g){let R=I.mask;if(R)for(w=0;w<g;w++)if(b=w*d,w<o)for(C=u;C<d;C++)R[b+C]=0;else for(C=0;C<d;C++)R[b+C]=0;else for(R=new Uint8Array(d*g),I.mask=R,w=0;w<o;w++)for(b=w*d,C=0;C<u;C++)R[b+C]=1}return I}async _readIFDs(t,e,i,r,n,s=4,a){if(!r)return null;(r>=e.byteLength||r<0)&&(e=(await this.request(this.url,{range:{from:r+n,to:r+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=r+n,r=0);const u=await this._readIFD(e,i,r,n,Ie.TIFF_TAGS,s,a);if(t.push(u.ifd),!u.nextIFD)return null;await this._readIFDs(t,e,i,u.nextIFD-n,n,s,a)}async _readIFD(t,e,i,r,n=Ie.TIFF_TAGS,s=4,a){if(!t)return null;const u=Kt(t,e,i,r,n,s);if(u.success){const o=[];if(u.ifd.forEach(l=>{l.values||o.push(l)}),o.length>0){const l=o.map(h=>h.offlineOffsetSize),c=Math.min.apply(null,l.map(h=>h[0]));if(Math.min.apply(null,l.map(h=>h[0]+h[1]))-c<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:c,to:c+this._bufferSize},responseType:"array-buffer",signal:a});t=h,r=c,o.forEach(m=>Zt(t,e,m,r))}}if(u.ifd.has("GEOKEYDIRECTORY")){const l=u.ifd.get("GEOKEYDIRECTORY"),c=l.values;if(c&&c.length>4){const h=c[0]+"."+c[1]+"."+c[2],m=await this._readIFD(t,e,l.valueOffset+6-r,r,Ie.GEO_KEYS,2,a);l.data=m.ifd,l.data&&l.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return u}if(u.requiredBufferSize&&u.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:r,to:r+u.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data).byteLength<u.requiredBufferSize?null:this._readIFD(t,e,0,r,Ie.TIFF_TAGS,4,a)}_getTileLocation(t,e,i){const{firstPyramidLevel:r,blockBoundary:n}=this.rasterInfo.storageInfo,s=t===0?0:t-(r-1),a=this._headerInfo.ifds[s];if(!a)return null;const u=Qt(a,this._headerInfo),o=Ke(a,"TILEOFFSETS");if(o===void 0)return null;const l=Ke(a,"TILEBYTECOUNTS"),{minRow:c,minCol:h,maxRow:m,maxCol:f}=n[s];if(e>m||i>f||e<c||i<h)return null;const p=Te(a,"IMAGEWIDTH"),y=Te(a,"IMAGELENGTH"),d=Te(a,"TILEWIDTH"),g=Te(a,"TILELENGTH"),I=u?this.rasterInfo.bandCount:1,w=I*e*(f+1)+i,C=[{from:o[w],to:o[w+I-1]+l[w+I-1]-1}];if(u){let T=!0;for(let _=0;_<I;_++)if(o[w+_]+l[w+_]!==o[w+_+1]){T=!1;break}if(!T)for(let _=0;_<I;_++)C[_]={from:o[w+_],to:o[w+_]+l[w+_]-1}}const b=o[w],R=l[w];return b==null||R==null?null:{ranges:C,ifd:a,actualTileWidth:i===f?p%d:d,actualTileHeight:e===m?y%g:g}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return $e(e)}catch{return null}}};x([v()],ne.prototype,"_files",void 0),x([v()],ne.prototype,"_headerInfo",void 0),x([v()],ne.prototype,"_bufferSize",void 0),x([v({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=x([Q("esri.layers.support.rasterDatasets.TIFFRaster")],ne);const Ci=ne,H=new Map;H.set("CRF",{desc:"Cloud Raster Format",constructor:wi}),H.set("MRF",{desc:"Meta Raster Format",constructor:_i}),H.set("TIFF",{desc:"GeoTIFF",constructor:Ci}),H.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Ri}),H.set("JPG",{desc:"JPG Raster Format",constructor:Se}),H.set("PNG",{desc:"PNG Raster Format",constructor:Se}),H.set("GIF",{desc:"GIF Raster Format",constructor:Se}),H.set("BMP",{desc:"BMP Raster Format",constructor:Se});class ki{static get supportedFormats(){const e=new Set;return H.forEach((i,r)=>e.add(r)),e}static async open(e){const{url:i,ioConfig:r,sourceJSON:n}=e;let s=e.datasetFormat;s==null&&i.lastIndexOf(".")&&(s=i.slice(i.lastIndexOf(".")+1).toUpperCase()),s==="OVR"||s==="TIF"?s="TIFF":s!=="JPG"&&s!=="JPEG"&&s!=="JFIF"||(s="JPG"),i.toLowerCase().indexOf("/imageserver")>-1&&i.toLowerCase().indexOf("/wcsserver")===-1&&(s="RasterTileServer");const a={url:i,sourceJSON:n,datasetFormat:s,ioConfig:r||{bandIds:null,sampling:null}};let u,o;if(this.supportedFormats.has(s))return u=H.get(s).constructor,o=new u(a),await o.open({signal:e.signal}),o;if(s)throw new E("rasterfactory:open","not a supported format "+s);const l=Array.from(H.keys());let c=0;const h=function(){return s=l[c++],s?(u=H.get(s).constructor,o=new u(a),o.open({signal:e.signal}).then(()=>o).catch(()=>h())):null};return h()}static register(e,i,r){H.has(e.toUpperCase())||H.set(e.toUpperCase(),{desc:i,constructor:r})}}let D=class extends ut(ct(ht(ft(dt(mi(mt(pt(yt(gt))))))))){constructor(...t){super(...t),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(t,e){return typeof t=="string"?$({url:t},e):t}load(t){const e=M(t)?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(xt).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var t,e;let i=[new pe({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const r=(t=this.rasterInfo)==null||(e=t.attributeTable)==null?void 0:e.fields,n="Raster.";if(r){const u=r.filter(o=>o.type!=="oid"&&o.name.toLowerCase()!=="value").map(o=>{const l=o.clone();return l.name=n+o.name,l});i=i.concat(u)}const s=this.rasterInfo.dataType;if((s==="vector-magdir"||s==="vector-uv")&&M(this.rasterInfo.multidimensionalInfo)){var a;const u=(a=this.rasterInfo.multidimensionalInfo.variables[0].unit)==null?void 0:a.trim(),o="Magnitude"+(u?` (${u})`:"");i.push(new pe({name:"Raster.Magnitude",alias:o,domain:null,editable:!1,type:"double"})),i.push(new pe({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return i}set renderer(t){this._set("renderer",t),this.updateRenderer()}readRenderer(t,e,i){const r=e&&e.layerDefinition&&e.layerDefinition.drawingInfo&&e.layerDefinition.drawingInfo.renderer,n=kt(r,i)||void 0;if(n!=null)return n}createPopupTemplate(t){return It({fields:this.rasterFields,title:this.title},t)}write(t,e){const{raster:i}=this;if(this.loaded?i.datasetFormat==="RasterTileServer"&&(i.tileType==="Raster"||i.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e&&e.messages){const r=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new E("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${r}'`,{layer:this}))}return null}async _openRaster(t){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await ki.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:G($({sampling:"closest"},this.ioConfig),{customFetchParameters:this.customParameters}),signal:t});const{rasterInfo:e}=this.raster;if(!e)throw new E("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:G($({},this.sourceJSON),{minScale:0,maxScale:0});this.read(i,{origin:"service"})}this.title==null&&(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",i=>this.raster.ioConfig.customFetchParameters=i)}};x([v({type:[wt],json:{write:{overridePolicy(){var t;return{enabled:!this.loaded||this.raster.tileType==="Raster"||((t=this.bandIds)==null?void 0:t.join(","))!=="0,1,2"}}}}})],D.prototype,"bandIds",void 0),x([v({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),vt(Pt)],D.prototype,"interpolation",void 0),x([v({json:{write:!0}})],D.prototype,"multidimensionalDefinition",void 0),x([v(bt)],D.prototype,"legendEnabled",void 0),x([v({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],D.prototype,"isReference",void 0),x([v({type:["show","hide"]})],D.prototype,"listMode",void 0),x([v()],D.prototype,"sourceJSON",void 0),x([v({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],D.prototype,"version",void 0),x([v()],D.prototype,"title",void 0),x([v({readOnly:!0,json:{read:!1}})],D.prototype,"type",void 0),x([v({type:["ArcGISTiledImageServiceLayer"]})],D.prototype,"operationalLayerType",void 0),x([v({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,i){e[i]=!t}}}})],D.prototype,"popupEnabled",void 0),x([v({type:St,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],D.prototype,"popupTemplate",void 0),x([v({readOnly:!0})],D.prototype,"defaultPopupTemplate",null),x([v({readOnly:!0,type:[pe]})],D.prototype,"fields",void 0),x([v({readOnly:!0,type:[pe]})],D.prototype,"rasterFields",null),x([v({types:st,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var t;const e=((t=this.renderer)==null?void 0:t.type)==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!e}}},origins:{"web-scene":{types:Mt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:t=>({enabled:t&&t.type!=="vector-field"&&t.type!=="flow"})}}}}})],D.prototype,"renderer",null),x([Tt("renderer")],D.prototype,"readRenderer",null),D=x([Q("esri.layers.ImageryTileLayer")],D);const Ji=D;export{Ji as default};
