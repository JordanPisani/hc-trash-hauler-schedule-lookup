import{bS as _,u as I,dK as D,bP as C,bT as k,bO as Q,aT as G,q as Z,b1 as A,r as b,_ as M,aB as x}from"./index.b4c7b16d.js";import{t as N,n as z,W as B,e as V,Q as W}from"./featureConversionUtils.1a47e5d5.js";import{m as J}from"./FeatureStore.15e14e7e.js";import{V as L,f as F,g as w}from"./QueryEngine.a1faf756.js";import{T as U,L as H,O as K}from"./geojson.f01f634a.js";import{l as Y,a as X,n as ee}from"./clientSideDefaults.c6ba7436.js";import{y as te,d as T,c as j,u as E,h as O}from"./sourceUtils.90d65b88.js";import"./PooledRBush.483492c4.js";import"./quickselect.b4c2f48f.js";import"./normalizeUtils.87810117.js";import"./WhereClause.b95d88ca.js";import"./projection.84ac2725.js";import"./ClassBreaksDefinition.f2db4f87.js";import"./OptimizedGeometry.c09f520b.js";import"./OptimizedFeatureSet.2574e09f.js";import"./aaBoundingRect.39e6473b.js";import"./ItemCache.ee6e92d9.js";import"./json.67c3770f.js";import"./QueryEngineCapabilities.9e441dc1.js";import"./utils.65407675.js";var se=Object.defineProperty,ie=Object.defineProperties,re=Object.getOwnPropertyDescriptors,S=Object.getOwnPropertySymbols,ne=Object.prototype.hasOwnProperty,ae=Object.prototype.propertyIsEnumerable,$=(p,e,t)=>e in p?se(p,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[e]=t,P=(p,e)=>{for(var t in e||(e={}))ne.call(e,t)&&$(p,t,e[t]);if(S)for(var t of S(e))ae.call(e,t)&&$(p,t,e[t]);return p},oe=(p,e)=>ie(p,re(e));const le={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Se{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this.loadOptions={url:e.url,customParameters:e.customParameters};const i=[];await this._checkProjection(e.spatialReference);let r=null;e.url&&(r=await this._fetch(t==null?void 0:t.signal));const a=U(r,{geometryType:e.geometryType}),o=e.fields||a.fields||[],u=e.hasZ!=null?e.hasZ:a.hasZ,d=a.geometryType,c=e.objectIdField||a.objectIdFieldName||"__OBJECTID",h=e.spatialReference||_;let s=e.timeInfo;o===a.fields&&a.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:a.unknownFields}});let l=o.find(n=>n.name===c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1):(l={alias:c,name:c,type:a.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const y={};for(const n of o){if(n.name==null&&(n.name=n.alias),n.alias==null&&(n.alias=n.name),!n.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:n});if(!D.jsonValues.includes(n.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${n.name}"`,{field:n});if(n.name!==l.name){const g=C(n);g!==void 0&&(y[n.name]=g)}}this._fieldsIndex=new k(o);const f=this._fieldsIndex.requiredFields.indexOf(l);if(f>-1&&this._fieldsIndex.requiredFields.splice(f,1),s){if(s.startTimeField){const n=this._fieldsIndex.get(s.startTimeField);n?(s.startTimeField=n.name,n.type="esriFieldTypeDate"):s.startTimeField=null}if(s.endTimeField){const n=this._fieldsIndex.get(s.endTimeField);n?(s.endTimeField=n.name,n.type="esriFieldTypeDate"):s.endTimeField=null}if(s.trackIdField){const n=this._fieldsIndex.get(s.trackIdField);n?s.trackIdField=n.name:(s.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:s}}))}s.startTimeField||s.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:s}}),s=null)}const v=d?ee(d):null,m={warnings:i,featureErrors:[],layerDefinition:oe(P({},le),{drawingInfo:v,templates:Y(y),extent:null,geometryType:d,objectIdField:c,fields:o,hasZ:!!u,timeInfo:s})};this._queryEngine=new L({fields:o,geometryType:d,hasM:!1,hasZ:u,objectIdField:c,spatialReference:h,timeInfo:s,featureStore:new J({geometryType:d,hasM:!1,hasZ:u}),cacheSpatialQueries:!0}),this._createDefaultAttributes=X(y,c);const q=await this._createFeatures(r);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,q);const R=this._normalizeFeatures(q,m.warnings,m.featureErrors);if(this._queryEngine.featureStore.addMany(R),m.layerDefinition.extent=this._queryEngine.fullExtent,m.layerDefinition.timeInfo){const{start:n,end:g}=this._queryEngine.timeExtent;m.layerDefinition.timeInfo.timeExtent=[n,g]}return m}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([te(t,i),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this.loadOptions.customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=Q(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const r=this._normalizeFeatures(i);r&&this._queryEngine.featureStore.addMany(r)},i=>{this._queryEngine.featureStore.clear(),G(i)||Z.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _createFeatures(e){const{geometryType:t,hasZ:i,objectIdField:r}=this._queryEngine,a=H(e,{geometryType:t,hasZ:i,objectIdField:r});if(!A(this._queryEngine.spatialReference,_))for(const o of a)b(o.geometry)&&(o.geometry=N(w(z(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return a}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this.loadOptions,r=(await M(t,{responseType:"json",query:P({},i),signal:e})).data;return await K(r),r}_normalizeFeatures(e,t,i){const{objectIdField:r}=this._queryEngine,a=[];for(const o of e){const u=this._createDefaultAttributes(),d=T(this._fieldsIndex,u,o.attributes,!0,t);d?i==null||i.push(d):(this._assignObjectId(u,o.attributes,!0),o.attributes=u,o.objectId=u[r],a.push(o))}return a}_applyEdits(e){const{adds:t,updates:i,deletes:r}=e,a={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(a,t),i&&i.length&&this._applyUpdateEdits(a,i),r&&r.length){for(const o of r)a.deleteResults.push(j(o));this._queryEngine.featureStore.removeManyById(r)}return{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:a}}_applyAddEdits(e,t){const{addResults:i}=e,{geometryType:r,hasM:a,hasZ:o,objectIdField:u,spatialReference:d,featureStore:c}=this._queryEngine,h=[];for(const s of t){if(s.geometry&&r!==x(s.geometry)){i.push(E("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=T(this._fieldsIndex,l,s.attributes);if(y)i.push(y);else{if(this._assignObjectId(l,s.attributes),s.attributes=l,s.uid!=null){const f=s.attributes[u];e.uidToObjectId[s.uid]=f}b(s.geometry)&&(s.geometry=w(O(s.geometry,d),s.geometry.spatialReference,d)),h.push(s),i.push(j(s.attributes[u]))}}c.addMany(B([],h,r,o,a,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:i,hasM:r,hasZ:a,objectIdField:o,spatialReference:u,featureStore:d}=this._queryEngine;for(const c of t){const{attributes:h,geometry:s}=c,l=h&&h[o];if(l==null){e.push(E(`Identifier field ${o} missing`));continue}if(!d.has(l)){e.push(E(`Feature with object id ${l} missing`));continue}const y=V(d.getFeature(l),i,a,r);if(b(s)){if(i!==x(s)){e.push(E("Incorrect geometry type."));continue}y.geometry=w(O(s,u),s.spatialReference,u)}if(h){const f=T(this._fieldsIndex,y.attributes,h);if(f){e.push(f);continue}}d.add(W(y,i,a,r,o)),e.push(j(l))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let r=Number.NEGATIVE_INFINITY;for(const a of t)a.objectId&&(r=Math.max(r,a.objectId));return r=Math.max(0,r)+1,()=>r++}_assignObjectId(e,t,i=!1){const r=this._queryEngine.objectIdField;e[r]=i&&r in t?t[r]:this._objectIdGenerator()}async _checkProjection(e){try{await F(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{Se as default};
